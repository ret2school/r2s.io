<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reverse engineering on ret2school</title>
    <link>https://ret2school.github.io/tags/reverse-engineering/</link>
    <description>Recent content in reverse engineering on ret2school</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 29 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ret2school.github.io/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[HeroCTF v3 - RE] ARMada, JNI, Password Keeper, RustInPeace, WTF, fatBoy</title>
      <link>https://ret2school.github.io/post/heroctfv3/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/heroctfv3/</guid>
      <description>HeroCTF v3  The files can be found here
 Here is a Write-Up of some RE tasks solved by supersnail.
sELF control (75 pts)  I found a program to read the flag but it seems to be broken&amp;hellip; Could you help me patching patching two bytes to make it functional ?
Challenge : nc chall0.heroctf.fr 2048
Format : Hero{}
Author : SoEasY
 The binary given is an ELF File, but IDA detects it as &amp;ldquo;IA64&amp;rdquo; ELF.</description>
    </item>
    
    <item>
      <title>[Midnight Sun CTF 2021 - RE] Labyrevnt</title>
      <link>https://ret2school.github.io/post/wu_labyrevnt/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/wu_labyrevnt/</guid>
      <description>You can find the files here.
We used the proximity browser in IDA with the &amp;ldquo;Add node -&amp;gt; Find path&amp;rdquo; mini-trick to get the path between the main and walk_end function. Once all the function names in the path where dumped, in the same order as in IDA, inside functions.txt, we just have to tell angr to discard, avoid, every state wherein the callstack is different from the path linking main and walk_end.</description>
    </item>
    
    <item>
      <title>[Securinets CTF 2021 - RE] RUN! &amp; YAY!</title>
      <link>https://ret2school.github.io/post/rev_securinets/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/rev_securinets/</guid>
      <description>RUN! (930 pts) This challenge was a keygenme for Windows (64-bit PE), and like all keygenmes you had to understand the algorithm and write a keygen for it.
The algorithm was &amp;ldquo;simple&amp;rdquo;, you just had to deal with C++ overhead for std::string, and was basically:
 The programs take the username and computes the sum of each char of the username (with some SSE2 wizardry) This sum is then given as seed to srand() The user serial is split into 2-char blocks, and each block is decoded as hex string and the integer is added to an array The program then searches the highest value in the decoded serial array and allocated a int array with this size The array is filled with rand() values mod 13371337 A valid serial is a sequences of indexes into the random array whose sum is equals to 0xbcdb6 mod 1337  So, the tricky part was to generate this sequence of indexes.</description>
    </item>
    
    <item>
      <title>[AeroCTF 2021 - RE] BashD00r</title>
      <link>https://ret2school.github.io/post/bashd00r/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/bashd00r/</guid>
      <description>Aero CTF 2021 - BashD00r (500 pts) This is the second challenge I was able to solve, and the hardest one. The task is below:
 There seems to be something wrong with our bash.
Can you see if anyone has entered the backdoor?
bash.7z
 So we are given a archive, which contains a &amp;ldquo;bash&amp;rdquo; binary. This binary was backdoored, so we need to find it to get the flag.</description>
    </item>
    
    <item>
      <title>[AeroCTF 2021 - RE] dummyper</title>
      <link>https://ret2school.github.io/post/dummyper/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/dummyper/</guid>
      <description>Aero CTF 2021 - Dummyper (454 pts) This the first challenge I did. The challenge&amp;rsquo;s task was:
 This stupid program has encrypted our flag.
We only have a dump left.
 With a mysterious &amp;ldquo;dump.7z&amp;rdquo; that contains a &amp;ldquo;dump&amp;rdquo; file. This file is an ELF binary, so we load it in IDA.
Overview IDA complains about broken section table, but still succeeds to load the bin. We get classical glibc&amp;rsquo;s __libc_start_main, and the &amp;ldquo;main&amp;rdquo; function which looks like this:</description>
    </item>
    
    <item>
      <title>[AeroCTF 2020 - RE] go away</title>
      <link>https://ret2school.github.io/post/aero_ctf_2020/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/aero_ctf_2020/</guid>
      <description>Hello world,
This writeup concerns the most difficult challenge I did on the CTF (having occupied myself a few hours to break it). At first glance, we have an &amp;ldquo;obfuscated&amp;rdquo; binary, which makes system calls to mmap and mprotect: we immediately think of a packer, and we will therefore have to unpack it.
Unpacking crackme Unpacking is not a problem on Linux when you are used to malware packers on Windows, thanks to radare2 and its visual mode.</description>
    </item>
    
    <item>
      <title>[AeroCTF 2020 - RE] 1000 and 1 night</title>
      <link>https://ret2school.github.io/post/1000_and_1_night/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/1000_and_1_night/</guid>
      <description>Author: supersnail
Files can be found here
For this challenge, we get an archive with a lot of files, the name of which seems to be a hash. Each file is an ELF x86_64 program file. In addition, a server listens, and requests:
Enter valid token to binary with name &amp;lt;8c235f89a8143a28a1d6067e959dd858&amp;gt; Token: at connection. We therefore understand quickly enough that we will have to automate the reversing of all these ELFs to send the correct token back to the server, and thus have the flag, the server requesting a series of tokens before spitting the flag.</description>
    </item>
    
    <item>
      <title>[UTCTF 2020 - RE] Crack the heart</title>
      <link>https://ret2school.github.io/post/crack_the_heart/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/crack_the_heart/</guid>
      <description>Author: supersnail
For this challenge, I first noticed (like in every other writeups) a big structure of offsets, that pointed to &amp;ldquo;funclets&amp;rdquo; followed by jump with rcx-relative offsets.
The relative jump function:
The first funclet just checks for the process being debugged, the &amp;ldquo;load_r9&amp;rdquo; funclet that jumps to the next funclet after skipping &amp;ldquo;n&amp;rdquo; bytes of garbage. Then the crackme calls a funclet &amp;ldquo;write_message&amp;rdquo; with the parameters (offset to &amp;ldquo;Why should I go out with you?</description>
    </item>
    
    <item>
      <title>[CSAW CTF 2020 - RE] Cuba</title>
      <link>https://ret2school.github.io/post/cuba/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/cuba/</guid>
      <description>Hi
This is my write up for the challange Cuba of CSAW CTF 2020 :
So this challenge is a CUBA program wrapped in a Windows Executable. CUBA is a GPU langage created by NVIDIA to work around GPU with high performance langage.
https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html
Luckily there is a public SDK for it, with a disassembler :
https://docs.nvidia.com/cuda/cuda-binary-utilities/index.html
Using a tool called cuobjdump, we can extract the assembly code :
To extract ptx text from a host binary, use the following command: cuobjdump -ptx &amp;lt;host binary&amp;gt;  And after reversing the output, we can see that it&amp;rsquo;s a simple xor looping through a ciphered flag</description>
    </item>
    
  </channel>
</rss>
