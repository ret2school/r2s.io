<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r0da on ret2school</title>
    <link>https://ret2school.github.io/tags/r0da/</link>
    <description>Recent content in r0da on ret2school</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 12 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ret2school.github.io/tags/r0da/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[BTSCTF 2021 - RE] BtS emulator</title>
      <link>https://ret2school.github.io/post/wu_emulator/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/wu_emulator/</guid>
      <description>The files can be found here.
 Hi, I&amp;rsquo;m r0da.
Last day I did a CTF called BTSCTF, and a challenge called BtS emulator. As I&amp;rsquo;m still working on VMP virtualization currently, I&amp;rsquo;m kind good with VM stuff.
First I noticed that the binary has all its symbols in it, so easier to reverse. Then I saw that the dispatcher routine seems pretty clean.
We found the opcode related to it :</description>
    </item>
    
    <item>
      <title>[CSAW CTF 2020 - RE] Cuba</title>
      <link>https://ret2school.github.io/post/cuba/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/cuba/</guid>
      <description>Hi
This is my write up for the challange Cuba of CSAW CTF 2020 :
So this challenge is a CUBA program wrapped in a Windows Executable. CUBA is a GPU langage created by NVIDIA to work around GPU with high performance langage.
https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html
Luckily there is a public SDK for it, with a disassembler :
https://docs.nvidia.com/cuda/cuda-binary-utilities/index.html
Using a tool called cuobjdump, we can extract the assembly code :
To extract ptx text from a host binary, use the following command: cuobjdump -ptx &amp;lt;host binary&amp;gt;  And after reversing the output, we can see that it&amp;rsquo;s a simple xor looping through a ciphered flag</description>
    </item>
    
  </channel>
</rss>
