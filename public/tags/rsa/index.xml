<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSA on ret2school</title>
    <link>https://ret2school.github.io/tags/rsa/</link>
    <description>Recent content in RSA on ret2school</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 11 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ret2school.github.io/tags/rsa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Midnight Sun CTF 2021 - Crypto] frank</title>
      <link>https://ret2school.github.io/post/writeuprsa/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/writeuprsa/</guid>
      <description>Welcome folks,
This writeup is about the Midnight Sun CTF frank challenge on how to recover a full RSA private key, when half of it is erased. Thanks to this recent cryptohack write-up from which this challenge is (for me) inspired. Challenge therefore requires recovering the entire RSA key from this image:
Get the part of the private key visible: The first step of the challenge is to recover the visible part, to do this I quickly created a small OCR script with the pytesseract module in Python, to facilitate the recovery task.</description>
    </item>
    
    <item>
      <title>[UnionCTF 2021 - RE] Unionware</title>
      <link>https://ret2school.github.io/post/unionware/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/unionware/</guid>
      <description>UnionCTF - Unionware This challenge gives us two files: an &amp;ldquo;unionware.ps1&amp;rdquo; and a &amp;ldquo;important_homework.txt.unionware&amp;rdquo; containing seemingly random bytes. The challenge tells us that a ransomware encrypted the important homework and asks us to decrypt it.
Analyzing the Powershell While looking at the powershell, we can see an obfuscated Powershell command, which seems to split some random string and then evaluating it. So, we&amp;rsquo;ll just run the part of the script which deobfuscates the payload without executing it, which give us:</description>
    </item>
    
  </channel>
</rss>
